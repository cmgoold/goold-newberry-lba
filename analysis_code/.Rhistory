K = 3,
thresh = c(1.5, 2.5),
jj_1 = d_s_stan$dog_id,
jj_2 = d_a_stan$dog_id,
gg_1 = d_s_stan$context_id,
gg_2 = d_a_stan$context_id,
jjgg_1 = d_s_stan$dog_context_id,
jjgg_2 = d_a_stan$dog_context_id,
jj_levels = 6, gg_levels = 6, jjgg_levels = 6,
use_reduce_sum = 1,
grainsize = 1
)
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
jhb_model <- cmdstanr::cmdstan_model("jhb-ordinal-hurdle-model.stan", cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"Rho_j", "Rho_g", "Rho_jg"
)
)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"Rho_j", "Rho_g", "Rho_jg"
)
)
head(d_a_stan)
stan_data <- list(
N = c(nrow(d_s_stan), nrow(d_a_stan)),
N_j = length(unique(d_s_stan$dog_id)),
N_g = length(unique(d_s_stan$context_id)),
N_jg = length(unique(d_s_stan$dog_context_id)),
N_x = c(ncol(X_s), ncol(X_a)),
x = d_s_stan$day_since_arrival_Z,
x_joint = d_a_stan$days_after_adoption_Z,
X_1 = X_s_stan,
X_2 = X_a_stan,
y = ifelse( is.na(d_s_stan$behaviour_code_colour), 0, d_s_stan$behaviour_code_colour),
y_joint = ifelse( is.na(d_a_stan$behaviour_code_colour), 0, d_a_stan$behaviour_code_colour),
K = 3,
thresh = c(1.5, 2.5),
jj_1 = d_s_stan$dog_id,
jj_2 = d_a_stan$dog_id,
gg_1 = d_s_stan$context_id,
gg_2 = d_a_stan$context_id,
jjgg_1 = d_s_stan$dog_context_id,
jjgg_2 = d_a_stan$dog_context_id,
jj_levels = 6, gg_levels = 6, jjgg_levels = 6,
use_reduce_sum = 0,
grainsize = 1
)
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
setwd("~/Dropbox/Statistics/Ordinal-data")
source("hierarchial-ordinal-reduce_sum-functions.R")
# generate data
set.seed(2021)
N_i = 3; N_j = 20; N_g = 8; N_x = 2
N_i_joint = 2;
Rho_j <- create_rand_corr_matrix(n = 6)
Rho_g <- create_rand_corr_matrix(n = 6)
Rho_jg <- create_rand_corr_matrix(n = 6)
K = 3
alpha = 1; beta = -1
sigma = 1.5;
Beta <- matrix(rnorm(N_x*2), ncol = 2)
Gamma <- matrix(rnorm(N_x*2), ncol = 2)
alpha_miss = logit(0.3); beta_miss = log(1.2)
sigma_j = runif(6, 0.5, 3);
sigma_g = runif(6, 0.5, 3);
sigma_jg = runif(6, 0.5, 3)
cut_points = seq(1.5, 2.5, 1)
kappa = c(0.2, 0.3)
delta = 0.5
epsilon = 1
gamma = 0.5
delta_miss = logit(0.05)
gamma_miss = log(5)
d <- sim_ord_data(N_i = N_i, N_j = N_j, N_g = N_g, N_x = N_x,
N_i_joint = N_i_joint,
K = K,
alpha = alpha, beta = beta,
sigma = sigma,
Beta = Beta,
alpha_miss = alpha_miss, beta_miss = beta_miss,
sigma_j = sigma_j, sigma_g = sigma_g, sigma_jg = sigma_jg,
Rho_j = Rho_j, Rho_g = Rho_g, Rho_jg = Rho_jg,
cut_points = cut_points,
kappa = kappa,
delta = delta, epsilon = epsilon,
gamma = gamma, delta_miss = delta_miss, gamma_miss = gamma_miss,
Gamma = Gamma
)
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
ordinal_model1 <- cmdstanr::cmdstan_model("~/Dropbox/Statistics/Ordinal-data/joint-hierarchical-ordinal-hurdle-reduce_sum.stan",cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- ordinal_model1$sample(
data = list(use_reduce_sum = 1, grainsize=1,
y = d$d_1$y,
y_joint = d$d_2$y_joint,
x = d$d_1$x, x_joint = d$d_2$x_joint,
N = c(length(d$d_1$y), length(d$d_2$y_joint)),
jj_levels = 6, gg_levels = 6, jjgg_levels = 6,
N_j = length(unique(d$d_1$jj_1)),
N_g = length(unique(d$d_1$gg_1)),
N_jg = length(unique(d$d_1$jjgg_1)),
jj_1 = d$d_1$jj_1, jj_2 = d$d_2$jj_2,
gg_1 = d$d_1$gg_1, gg_2 = d$d_2$gg_2,
jjgg_1 = d$d_1$jjgg_1, jjgg_2 = d$d_2$jjgg_2,
K = 3, thresh=c(1.5,2.5),
N_x = c(N_x, N_x),
X_1 = d$d_1[,grep("\\bX\\b", colnames(d$d_1))],
X_2 = d$d_2[,grep("\\bX\\b", colnames(d$d_2))]
),
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"Rho_j", "Rho_g", "Rho_jg"
)
)
start <- Sys.time()
fit <- ordinal_model1$sample(
data = list(use_reduce_sum = 0, grainsize=1,
y = d$d_1$y,
y_joint = d$d_2$y_joint,
x = d$d_1$x, x_joint = d$d_2$x_joint,
N = c(length(d$d_1$y), length(d$d_2$y_joint)),
jj_levels = 6, gg_levels = 6, jjgg_levels = 6,
N_j = length(unique(d$d_1$jj_1)),
N_g = length(unique(d$d_1$gg_1)),
N_jg = length(unique(d$d_1$jjgg_1)),
jj_1 = d$d_1$jj_1, jj_2 = d$d_2$jj_2,
gg_1 = d$d_1$gg_1, gg_2 = d$d_2$gg_2,
jjgg_1 = d$d_1$jjgg_1, jjgg_2 = d$d_2$jjgg_2,
K = 3, thresh=c(1.5,2.5),
N_x = c(N_x, N_x),
X_1 = d$d_1[,grep("\\bX\\b", colnames(d$d_1))],
X_2 = d$d_2[,grep("\\bX\\b", colnames(d$d_2))]
),
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"Rho_j", "Rho_g", "Rho_jg"
)
)
delta
kappa
delta_miss
# generate data
set.seed(2021)
N_i = 3; N_j = 20; N_g = 8; N_x = 2
N_i_joint = 3;
Rho_j <- create_rand_corr_matrix(n = 6)
Rho_g <- create_rand_corr_matrix(n = 6)
Rho_jg <- create_rand_corr_matrix(n = 6)
K = 3
alpha = 1; beta = -1
sigma = 1.5;
Beta <- matrix(rnorm(N_x*2), ncol = 2)
Gamma <- matrix(rnorm(N_x*2), ncol = 2)
alpha_miss = logit(0.3); beta_miss = log(1.2)
sigma_j = runif(6, 0.5, 3);
sigma_g = runif(6, 0.5, 3);
sigma_jg = runif(6, 0.5, 3)
cut_points = seq(1.5, 2.5, 1)
kappa = c(0.2, 0.3)
delta = 0.5
epsilon = 1
gamma = 0.5
delta_miss = logit(0.05)
gamma_miss = log(5)
# generate data
set.seed(2021)
N_i = 3; N_j = 20; N_g = 8; N_x = 2
N_i_joint = 3;
Rho_j <- create_rand_corr_matrix(n = 6)
Rho_g <- create_rand_corr_matrix(n = 6)
Rho_jg <- create_rand_corr_matrix(n = 6)
K = 3
alpha = 1; beta = -1
sigma = 1.5;
Beta <- matrix(rnorm(N_x*2), ncol = 2)
Gamma <- matrix(rnorm(N_x*2), ncol = 2)
alpha_miss = logit(0.3); beta_miss = log(1.2)
sigma_j = runif(6, 0.5, 3);
sigma_g = runif(6, 0.5, 3);
sigma_jg = runif(6, 0.5, 3)
cut_points = seq(1.5, 2.5, 1)
kappa = c(0.2, 0.3)
delta = 0.5
epsilon = 1
gamma = 0.5
delta_miss = logit(0.05)
gamma_miss = log(5)
d <- sim_ord_data(N_i = N_i, N_j = N_j, N_g = N_g, N_x = N_x,
N_i_joint = N_i_joint,
K = K,
alpha = alpha, beta = beta,
sigma = sigma,
Beta = Beta,
alpha_miss = alpha_miss, beta_miss = beta_miss,
sigma_j = sigma_j, sigma_g = sigma_g, sigma_jg = sigma_jg,
Rho_j = Rho_j, Rho_g = Rho_g, Rho_jg = Rho_jg,
cut_points = cut_points,
kappa = kappa,
delta = delta, epsilon = epsilon,
gamma = gamma, delta_miss = delta_miss, gamma_miss = gamma_miss,
Gamma = Gamma
)
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
ordinal_model1 <- cmdstanr::cmdstan_model("~/Dropbox/Statistics/Ordinal-data/joint-hierarchical-ordinal-hurdle-reduce_sum.stan",cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- ordinal_model1$sample(
data = list(use_reduce_sum = 1, grainsize=1,
y = d$d_1$y,
y_joint = d$d_2$y_joint,
x = d$d_1$x, x_joint = d$d_2$x_joint,
N = c(length(d$d_1$y), length(d$d_2$y_joint)),
jj_levels = 6, gg_levels = 6, jjgg_levels = 6,
N_j = length(unique(d$d_1$jj_1)),
N_g = length(unique(d$d_1$gg_1)),
N_jg = length(unique(d$d_1$jjgg_1)),
jj_1 = d$d_1$jj_1, jj_2 = d$d_2$jj_2,
gg_1 = d$d_1$gg_1, gg_2 = d$d_2$gg_2,
jjgg_1 = d$d_1$jjgg_1, jjgg_2 = d$d_2$jjgg_2,
K = 3, thresh=c(1.5,2.5),
N_x = c(N_x, N_x),
X_1 = d$d_1[,grep("\\bX\\b", colnames(d$d_1))],
X_2 = d$d_2[,grep("\\bX\\b", colnames(d$d_2))]
),
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"Rho_j", "Rho_g", "Rho_jg"
)
)
N_i = 3; N_j = 20; N_g = 8; N_x = 2
N_i_joint = 3;
Rho_j <- create_rand_corr_matrix(n = 6)
Rho_g <- create_rand_corr_matrix(n = 6)
Rho_jg <- create_rand_corr_matrix(n = 6)
K = 3
alpha = 1; beta = -1
sigma = 1.5;
Beta <- matrix(rnorm(N_x*2), ncol = 2)
Gamma <- matrix(rnorm(N_x*2), ncol = 2)
alpha_miss = logit(0.3); beta_miss = log(1.2)
sigma_j = runif(6, 0.5, 3);
sigma_g = runif(6, 0.5, 3);
sigma_jg = runif(6, 0.5, 3)
cut_points = seq(1.5, 2.5, 1)
kappa = c(0.2, 0.3)
delta = 1
epsilon = 1.5
gamma = 1
delta_miss = logit(0.05)
gamma_miss = log(5)
d <- sim_ord_data(N_i = N_i, N_j = N_j, N_g = N_g, N_x = N_x,
N_i_joint = N_i_joint,
K = K,
alpha = alpha, beta = beta,
sigma = sigma,
Beta = Beta,
alpha_miss = alpha_miss, beta_miss = beta_miss,
sigma_j = sigma_j, sigma_g = sigma_g, sigma_jg = sigma_jg,
Rho_j = Rho_j, Rho_g = Rho_g, Rho_jg = Rho_jg,
cut_points = cut_points,
kappa = kappa,
delta = delta, epsilon = epsilon,
gamma = gamma, delta_miss = delta_miss, gamma_miss = gamma_miss,
Gamma = Gamma
)
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
ordinal_model1 <- cmdstanr::cmdstan_model("~/Dropbox/Statistics/Ordinal-data/joint-hierarchical-ordinal-hurdle-reduce_sum.stan",cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- ordinal_model1$sample(
data = list(use_reduce_sum = 1, grainsize=1,
y = d$d_1$y,
y_joint = d$d_2$y_joint,
x = d$d_1$x, x_joint = d$d_2$x_joint,
N = c(length(d$d_1$y), length(d$d_2$y_joint)),
jj_levels = 6, gg_levels = 6, jjgg_levels = 6,
N_j = length(unique(d$d_1$jj_1)),
N_g = length(unique(d$d_1$gg_1)),
N_jg = length(unique(d$d_1$jjgg_1)),
jj_1 = d$d_1$jj_1, jj_2 = d$d_2$jj_2,
gg_1 = d$d_1$gg_1, gg_2 = d$d_2$gg_2,
jjgg_1 = d$d_1$jjgg_1, jjgg_2 = d$d_2$jjgg_2,
K = 3, thresh=c(1.5,2.5),
N_x = c(N_x, N_x),
X_1 = d$d_1[,grep("\\bX\\b", colnames(d$d_1))],
X_2 = d$d_2[,grep("\\bX\\b", colnames(d$d_2))]
),
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"Rho_j", "Rho_g", "Rho_jg"
)
)
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
ordinal_model1 <- cmdstanr::cmdstan_model("~/Dropbox/Statistics/Ordinal-data/joint-hierarchical-ordinal-hurdle-reduce_sum.stan",cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- ordinal_model1$sample(
data = list(use_reduce_sum = 1, grainsize=1,
y = d$d_1$y,
y_joint = d$d_2$y_joint,
x = d$d_1$x, x_joint = d$d_2$x_joint,
N = c(length(d$d_1$y), length(d$d_2$y_joint)),
jj_levels = 6, gg_levels = 6, jjgg_levels = 6,
N_j = length(unique(d$d_1$jj_1)),
N_g = length(unique(d$d_1$gg_1)),
N_jg = length(unique(d$d_1$jjgg_1)),
jj_1 = d$d_1$jj_1, jj_2 = d$d_2$jj_2,
gg_1 = d$d_1$gg_1, gg_2 = d$d_2$gg_2,
jjgg_1 = d$d_1$jjgg_1, jjgg_2 = d$d_2$jjgg_2,
K = 3, thresh=c(1.5,2.5),
N_x = c(N_x, N_x),
X_1 = d$d_1[,grep("\\bX\\b", colnames(d$d_1))],
X_2 = d$d_2[,grep("\\bX\\b", colnames(d$d_2))]
),
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"Rho_j", "Rho_g", "Rho_jg"
)
)
jhb_model <- cmdstanr::cmdstan_model("jhb-ordinal-hurdle-model.stan", cpp_options = list(stan_threads = TRUE))
setwd("~/Dropbox/PhD/PhD_NMBU/PaperIV/GooldNewberry2020-lba/analysis_code")
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
jhb_model <- cmdstanr::cmdstan_model("jhb-ordinal-hurdle-model.stan", cpp_options = list(stan_threads = TRUE))
d_s_stan <- d_s_order_by_id[ d_s_order_by_id$dog_id %in% 1:20 & d_s_order_by_id$day_since_arrival < 10, ]
d_a_stan <- d_a_order_by_id[ d_a_order_by_id$dog_id %in% 1:20, ]
X_s_stan <- X_s[ d_s_order_by_id$dog_id %in% 1:20 & d_s_order_by_id$day_since_arrival < 10, ]
X_a_stan <- X_a[ d_a_order_by_id$dog_id %in% 1:20, ]
stan_data <- list(
N = c(nrow(d_s_stan), nrow(d_a_stan)),
N_j = length(unique(d_s_stan$dog_id)),
N_g = length(unique(d_s_stan$context_id)),
N_jg = length(unique(d_s_stan$dog_context_id)),
N_x = c(ncol(X_s), ncol(X_a)),
x = d_s_stan$day_since_arrival_Z,
x_joint = d_a_stan$days_after_adoption_Z,
X_1 = X_s_stan,
X_2 = X_a_stan,
y = ifelse( is.na(d_s_stan$behaviour_code_colour), 0, d_s_stan$behaviour_code_colour),
y_joint = ifelse( is.na(d_a_stan$behaviour_code_colour), 0, d_a_stan$behaviour_code_colour),
K = 3,
thresh = c(1.5, 2.5),
jj_1 = d_s_stan$dog_id,
jj_2 = d_a_stan$dog_id,
gg_1 = d_s_stan$context_id,
gg_2 = d_a_stan$context_id,
jjgg_1 = d_s_stan$dog_context_id,
jjgg_2 = d_a_stan$dog_context_id,
jj_levels = 6, gg_levels = 6, jjgg_levels = 6,
use_reduce_sum = 1,
grainsize = 1
)
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
jhb_model <- cmdstanr::cmdstan_model("jhb-ordinal-hurdle-model.stan", cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"Rho_j", "Rho_g", "Rho_jg"
)
)
print( rstan::read_stan_csv(fit$output_files()), pars = c("Rho_jg"
)
)
jhb_model <- cmdstanr::cmdstan_model("jhb-ordinal-hurdle-model.stan", cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
jhb_model <- cmdstanr::cmdstan_model("jhb-ordinal-hurdle-model.stan", cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 4,
init = 0, refresh = 100
)
print(end <- Sys.time() - start)
cmdstanr::set_cmdstan_path("~/Documents/cmdstan-2.23.0")
jhb_model <- cmdstanr::cmdstan_model("jhb-ordinal-hurdle-model.stan", cpp_options = list(stan_threads = TRUE))
cmdstanr::set_num_threads(4)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 4,
init = 0, refresh = 100,
num_warmup = 250, num_samples = 2000
)
print(end <- Sys.time() - start)
print( rstan::read_stan_csv(fit$output_files()), pars = c("alpha", "beta", "sigma",
"alpha_miss", "beta_miss",
"delta","epsilon","gamma",
"delta_miss", "gamma_miss",
"sigma_j", "sigma_g", "sigma_jg",
"kappa",
"Rho_j", "Rho_g", "Rho_jg"
)
)
cmdstanr::set_num_threads(8)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 4,
init = 0, refresh = 100,
num_warmup = 250, num_samples = 2000
)
print(end <- Sys.time() - start)
cmdstanr::set_num_threads(8)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 8,
init = 0, refresh = 100,
iter_warmup = 250, iter_samples = 2000
)
print(end <- Sys.time() - start)
cmdstanr::set_num_threads(8)
start <- Sys.time()
fit <- jhb_model$sample(
data = stan_data,
chains = 1, cores = 8,
init = 0, refresh = 100,
iter_warmup = 250, iter_sampling = 2000
)
print(end <- Sys.time() - start)
